suite: configmap
templates:
  - configmap.yaml
values:
  - ../values.yaml
tests:
  - it: should render frontend parameters
    template: configmap.yaml
    set:
      frontend:
        baseUrl: https://example.com
        shortcodeBaseUrl: https://example.com/shortcode
        adminUrl: https://example.com/admin
        backendGqlUrl: https://example.com/api/graphql
        backendWsUrl: wss://example.com/api/graphql
        backendApiUrl: https://example.com/api
        appTosLink: https://example.com/tos
        appPrivacyPolicyLink: https://example.com/privacy
        enableSubpathBasedAccess: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-hoppscotch
      - equal:
          path: data.VITE_BASE_URL
          value: https://example.com
      - equal:
          path: data.VITE_SHORTCODE_BASE_URL
          value: https://example.com/shortcode
      - equal:
          path: data.VITE_ADMIN_URL
          value: https://example.com/admin
      - equal:
          path: data.VITE_BACKEND_GQL_URL
          value: https://example.com/api/graphql
      - equal:
          path: data.VITE_BACKEND_WS_URL
          value: wss://example.com/api/graphql
      - equal:
          path: data.VITE_BACKEND_API_URL
          value: https://example.com/api
      - equal:
          path: data.VITE_APP_TOS_LINK
          value: https://example.com/tos
      - equal:
          path: data.VITE_APP_PRIVACY_POLICY_LINK
          value: https://example.com/privacy
      - equal:
          path: data.ENABLE_SUBPATH_BASED_ACCESS
          value: "true"
  - it: should render backend parameters
    template: configmap.yaml
    set:
      backend:
        databaseUrl: postgres://user:password@example.com:5432/hoppscotch
        aioAlternatePort: 3000
        jwtSecret: jwt-secret
        tokenSaltComplexity: 10
        magicLinkTokenValidity: 3
        sessionSecret: session-secret
        refreshTokenValidity: "604800000"
        accessTokenValidity: "86400000"
        allowSecureCookies: true
        dataEncryptionKey: data-encryption-key
        redirectUrl: https://example.com
        whitelistedOrigins:
          - https://example.com
          - app://example.com
        allowedAuthProviders:
          - google
          - github
          - microsoft
          - email
        googleAuth:
          clientId: google-client-id
          clientSecret: google-client-secret
          callbackUrl: https://example.com/auth/google/callback
          scope:
            - email
            - profile
        githubAuth:
          clientId: github-client-id
          clientSecret: github-client-secret
          callbackUrl: https://example.com/auth/github/callback
          scope:
            - user:email
        microsoftAuth:
          clientId: microsoft-client-id
          clientSecret: microsoft-client-secret
          callbackUrl: https://example.com/auth/microsoft/callback
          scope:
            - user.read
          tenant: common
        mailer:
          smtpEnabled: true
          useCustomConfigs: false
          addressFrom: no-reply@example.com
          smtpUrl: smtps://smtp-user:smtp-password@smtp.example.com
          smtpHost: smtp.example.com
          smtpPort: 465
          smtpSecure: true
          smtpUser: smtp-user
          smtpPassword: smtp-password
          tlsRejectUnauthorized: true
        rateLimit:
          ttl: 60
          max: 100
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-hoppscotch
      - equal:
          path: data.DATABASE_URL
          value: postgres://user:password@example.com:5432/hoppscotch
      - equal:
          path: data.HOPP_AIO_ALTERNATE_PORT
          value: "3000"
      - equal:
          path: data.JWT_SECRET
          value: jwt-secret
      - equal:
          path: data.TOKEN_SALT_COMPLEXITY
          value: "10"
      - equal:
          path: data.MAGIC_LINK_TOKEN_VALIDITY
          value: "3"
      - equal:
          path: data.REFRESH_TOKEN_VALIDITY
          value: "604800000"
      - equal:
          path: data.ACCESS_TOKEN_VALIDITY
          value: "86400000"
      - equal:
          path: data.SESSION_SECRET
          value: session-secret
      - equal:
          path: data.ALLOW_SECURE_COOKIES
          value: "true"
      - equal:
          path: data.DATA_ENCRYPTION_KEY
          value: data-encryption-key
      - equal:
          path: data.REDIRECT_URL
          value: https://example.com
      - equal:
          path: data.WHITELISTED_ORIGINS
          value: https://example.com,app://example.com
      - equal:
          path: data.VITE_ALLOWED_AUTH_PROVIDERS
          value: GOOGLE,GITHUB,MICROSOFT,EMAIL
      - equal:
          path: data.GOOGLE_CLIENT_ID
          value: google-client-id
      - equal:
          path: data.GOOGLE_CLIENT_SECRET
          value: google-client-secret
      - equal:
          path: data.GOOGLE_CALLBACK_URL
          value: https://example.com/auth/google/callback
      - equal:
          path: data.GOOGLE_SCOPE
          value: email,profile
      - equal:
          path: data.GITHUB_CLIENT_ID
          value: github-client-id
      - equal:
          path: data.GITHUB_CLIENT_SECRET
          value: github-client-secret
      - equal:
          path: data.GITHUB_CALLBACK_URL
          value: https://example.com/auth/github/callback
      - equal:
          path: data.GITHUB_SCOPE
          value: user:email
      - equal:
          path: data.MICROSOFT_CLIENT_ID
          value: microsoft-client-id
      - equal:
          path: data.MICROSOFT_CLIENT_SECRET
          value: microsoft-client-secret
      - equal:
          path: data.MICROSOFT_CALLBACK_URL
          value: https://example.com/auth/microsoft/callback
      - equal:
          path: data.MICROSOFT_SCOPE
          value: user.read
      - equal:
          path: data.MICROSOFT_TENANT
          value: common
      - equal:
          path: data.MAILER_SMTP_ENABLE
          value: "true"
      - equal:
          path: data.MAILER_USE_CUSTOM_CONFIGS
          value: "false"
      - equal:
          path: data.MAILER_ADDRESS_FROM
          value: no-reply@example.com
      - equal:
          path: data.MAILER_SMTP_URL
          value: smtps://smtp-user:smtp-password@smtp.example.com
      - equal:
          path: data.MAILER_SMTP_HOST
          value: smtp.example.com
      - equal:
          path: data.MAILER_SMTP_PORT
          value: "465"
      - equal:
          path: data.MAILER_SMTP_SECURE
          value: "true"
      - equal:
          path: data.MAILER_SMTP_USER
          value: smtp-user
      - equal:
          path: data.MAILER_SMTP_PASSWORD
          value: smtp-password
      - equal:
          path: data.MAILER_TLS_REJECT_UNAUTHORIZED
          value: "true"
      - equal:
          path: data.RATE_LIMIT_TTL
          value: "60"
      - equal:
          path: data.RATE_LIMIT_MAX
          value: "100"
  - it: should render enterprise parameters
    template: configmap.yaml
    set:
      enterprise:
        enabled: true
        licenseKey: enterprise-license-key
        frontend:
          localProxyServerEnabled: true
          proxyAppUrl: https://proxy.example.com
        backend:
          githubEnterpriseAuth:
            enabled: true
            authorizationUrl: https://github.example.com/login/oauth/authorize
            tokenUrl: https://github.example.com/login/oauth/access_token
            userProfileUrl: https://github.example.com/users
            userEmailUrl: https://github.example.com/user/emails
          samlAuth:
            issuer: https://saml.example.com
            audience: https://example.com
            callbackUrl: https://example.com/v1/auth/saml/callback
            cert: -|
              -----BEGIN CERTIFICATE-----
              MIID...
              -----END CERTIFICATE-----
            entryPoint: https://saml.example.com/saml
            wantAssertionsSigned: true
            wantResponseSigned: true
          oidcAuth:
            providerName: oidc-provider
            issuer: https://oidc.example.com
            authorizationUrl: https://oidc.example.com/auth
            tokenUrl: https://oidc.example.com/token
            userInfoUrl: https://oidc.example.com/userinfo
            clientId: oidc-client-id
            clientSecret: oidc-client-secret
            callbackUrl: https://example.com/v1/auth/oidc/callback
            scope:
              - openid
              - profile
              - email
          clickhouse:
            allowAuditLogs: true
            host: clickhouse.example.com
            port: 8123
            user: clickhouse-user
            password: clickhouse-password
          horizontalScalingEnabled: true
          redisUrl: redis://redis-user:redis-password@redis.example.com:6379
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-hoppscotch
      - equal:
          path: data.ENTERPRISE_LICENSE_KEY
          value: enterprise-license-key
      - equal:
          path: data.LOCAL_PROXY_SERVER_ENABLE
          value: "true"
      - equal:
          path: data.PROXY_APP_URL
          value: https://proxy.example.com
      - equal:
          path: data.IS_GITHUB_ENTERPRISE_ENABLED
          value: "true"
      - equal:
          path: data.GITHUB_AUTHORIZATION_URL
          value: https://github.example.com/login/oauth/authorize
      - equal:
          path: data.GITHUB_TOKEN_URL
          value: https://github.example.com/login/oauth/access_token
      - equal:
          path: data.GITHUB_USER_PROFILE_URL
          value: https://github.example.com/users
      - equal:
          path: data.GITHUB_USER_EMAIL_URL
          value: https://github.example.com/user/emails
      - equal:
          path: data.SAML_ISSUER
          value: https://saml.example.com
      - equal:
          path: data.SAML_AUDIENCE
          value: https://example.com
      - equal:
          path: data.SAML_CALLBACK_URL
          value: https://example.com/v1/auth/saml/callback
      - equal:
          path: data.SAML_CERT
          value: -|
            -----BEGIN CERTIFICATE-----
            MIID...
            -----END CERTIFICATE-----
      - equal:
          path: data.SAML_ENTRY_POINT
          value: https://saml.example.com/saml
      - equal:
          path: data.SAML_WANT_ASSERTIONS_SIGNED
          value: "true"
      - equal:
          path: data.SAML_WANT_RESPONSE_SIGNED
          value: "true"
      - equal:
          path: data.OIDC_PROVIDER_NAME
          value: oidc-provider
      - equal:
          path: data.OIDC_ISSUER
          value: https://oidc.example.com
      - equal:
          path: data.OIDC_AUTH_URL
          value: https://oidc.example.com/auth
      - equal:
          path: data.OIDC_TOKEN_URL
          value: https://oidc.example.com/token
      - equal:
          path: data.OIDC_USER_INFO_URL
          value: https://oidc.example.com/userinfo
      - equal:
          path: data.OIDC_CLIENT_ID
          value: oidc-client-id
      - equal:
          path: data.OIDC_CLIENT_SECRET
          value: oidc-client-secret
      - equal:
          path: data.OIDC_CALLBACK_URL
          value: https://example.com/v1/auth/oidc/callback
      - equal:
          path: data.OIDC_SCOPE
          value: "openid profile email"
      - equal:
          path: data.ALLOW_AUDIT_LOGS
          value: "true"
      - equal:
          path: data.CLICKHOUSE_HOST
          value: clickhouse.example.com
      - equal:
          path: data.CLICKHOUSE_USER
          value: clickhouse-user
      - equal:
          path: data.CLICKHOUSE_PASSWORD
          value: clickhouse-password
      - equal:
          path: data.HORIZONTAL_SCALING
          value: "true"
      - equal:
          path: data.REDIS_URL
          value: redis://redis-user:redis-password@redis.example.com:6379
