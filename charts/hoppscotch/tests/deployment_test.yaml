suite: Deployment
templates:
  - configmap.yaml
  - deployment.yaml
  - secrets.yaml
values:
  - ../values.yaml
tests:
  - it: should have checksum configmap annotation
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: metadata.name
          value: release-name-hoppscotch
      - isNotNullOrEmpty:
          path: spec.template.metadata.annotations.checksum/configmap-release-name-hoppscotch

  - it: should have env from configmap
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: metadata.name
          value: release-name-hoppscotch
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: release-name-hoppscotch

  - it: should have checksum secret annotation
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: metadata.name
          value: release-name-hoppscotch
      - isNotNullOrEmpty:
          path: spec.template.metadata.annotations.checksum/secret-release-name-hoppscotch

  - it: should have env from secrets
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: metadata.name
          value: release-name-hoppscotch
      - equal:
          path: spec.template.spec.containers[0].envFrom[1].secretRef.name
          value: release-name-hoppscotch

  - it: should have extra environments
    template: deployment.yaml
    documentIndex: 0
    set:
      extraEnvVars:
        - name: FOO
          value: BAR
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: FOO
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: BAR

  - it: should have default init containers
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: wait-for-database
      - equal:
          path: spec.template.spec.initContainers[1].name
          value: wait-for-database-setup

  - it: should have not have wait for DB init container when disabled
    template: deployment.yaml
    set:
      defaultInitContainers:
        waitForDatabase:
          enabled: false
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - notContains:
          path: spec.template.spec.initContainers
          content:
            - name: wait-for-database

  - it: should have not have wait for DB setup init container when disabled
    template: deployment.yaml
    set:
      defaultInitContainers:
        waitForDatabaseSetup:
          enabled: false
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - notContains:
          path: spec.template.spec.initContainers
          content:
            - name: wait-for-database-setup

  - it: should have default init containers with custom timeout
    template: deployment.yaml
    set:
      defaultInitContainers:
        waitForDatabase:
          timeout: 120
        waitForDatabaseSetup:
          timeout: 120
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].args[2]
          value: "120"
      - equal:
          path: spec.template.spec.initContainers[1].args[2]
          value: "120"

  - it: should use default update strategy
    template: deployment.yaml
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.strategy.type
          value: RollingUpdate

  - it: should use custom update strategy
    template: deployment.yaml
    documentIndex: 0
    set:
      updateStrategy:
        type: Recreate
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.strategy.type
          value: Recreate

  - it: should use custom rolling update strategy
    template: deployment.yaml
    documentIndex: 0
    set:
      updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 2
          maxSurge: 0
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.strategy.type
          value: RollingUpdate
      - equal:
          path: spec.strategy.rollingUpdate.maxUnavailable
          value: 2
      - equal:
          path: spec.strategy.rollingUpdate.maxSurge
          value: 0

  - it: should not have strategy when updateStrategy is null
    template: deployment.yaml
    documentIndex: 0
    set:
      updateStrategy: null
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - notExists:
          path: spec.strategy
  - it: should use custom wait for database image when configured
    template: deployment.yaml
    documentIndex: 0
    set:
      defaultInitContainers:
        waitForDatabase:
          enabled: true
          image:
            repository: custom-postgres
            tag: 15-alpine
            pullPolicy: Always
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: wait-for-database
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: custom-postgres:15-alpine
      - equal:
          path: spec.template.spec.initContainers[0].imagePullPolicy
          value: Always

  - it: should use default wait for database image when not configured
    template: deployment.yaml
    documentIndex: 0
    set:
      defaultInitContainers:
        waitForDatabase:
          enabled: true
    asserts:
      - containsDocument:
          apiVersion: apps/v1
          kind: Deployment
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: wait-for-database
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: postgres:16-alpine
      - equal:
          path: spec.template.spec.initContainers[0].imagePullPolicy
          value: IfNotPresent
