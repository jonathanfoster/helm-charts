# @section -- Global parameters

# -- This is for the secrets for pulling an image from a private repository.
# @section -- Global parameters
imagePullSecrets: []

# @section -- Common parameters

# -- This is to override the chart name.
# @section -- Common parameters
nameOverride: ""
# -- This is to override the fully qualified app name.
# @section -- Common parameters
fullnameOverride: ""

# @section -- Hoppscotch common parameters

# -- This will set the replicaset count.
# @section -- Hoppscotch common parameters
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # -- This sets the image repository.
  # @section -- Hoppscotch common parameters
  repository: nginx
  # -- This sets the pull policy for images.
  # @section -- Hoppscotch common parameters
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  # @section -- Hoppscotch common parameters
  tag: latest

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # -- Specifies whether a service account should be created
  # @section -- Hoppscotch common parameters
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  # @section -- Hoppscotch common parameters
  automount: true
  # -- Annotations to add to the service account
  # @section -- Hoppscotch common parameters
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  # @section -- Hoppscotch common parameters
  name: ""

# -- This is for setting Kubernetes Annotations to a Pod.
# @section -- Hoppscotch common parameters
podAnnotations: {}
# -- This is for setting Kubernetes Labels to a Pod.
# @section -- Hoppscotch common parameters
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # -- This sets the service type.
  # @section -- Hoppscotch common parameters
  type: ClusterIP
  # -- This sets the ports.
  # @section -- Hoppscotch common parameters
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- This is to setup the liveness and readiness probes.
# @section -- Hoppscotch common parameters
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# -- This section is for setting up autoscaling.
# @section -- Hoppscotch common parameters
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
# @section -- Hoppscotch common parameters
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition.
# @section -- Hoppscotch common parameters
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# @section -- Database parameters

# PostgreSQL chart configuration
# ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  # -- Switch to enable or disable the PostgreSQL helm chart
  # @section -- Database parameters
  enabled: true
  auth:
    # -- Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    # @section -- Database parameters
    enablePostgresUser: true
    # -- Name for a custom user to create
    # @section -- Database parameters
    username: hoppscotch
    # -- Password for the custom user to create
    # @section -- Database parameters
    password: ""
    # -- Name for a custom database to create
    # @section -- Database parameters
    database: hoppscotch
    existingSecret: ""
  # -- PostgreSQL architecture (`standalone` or `replication`)
  # @section -- Database parameters
  architecture: standalone
  primary:
    # -- PostgreSQL Primary resource requests and limits
    # @section -- Database parameters
    # ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    # Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
    # More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    #
    resourcesPreset: "nano"
    # -- Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    # @section -- Database parameters
    # Example:
    # resources:
    #   requests:
    #     cpu: 2
    #     memory: 512Mi
    #   limits:
    #     cpu: 3
    #     memory: 1024Mi
    #
    resources: {}

# External PostgreSQL configuration
# All of these values are only used when postgresql.enabled is set to false
externalDatabase:
  # -- Database host (ignored if externalDatabase.sqlConnection is set)
  # @section -- Database parameters
  host: localhost
  # -- Database port number (ignored if externalDatabase.sqlConnection is set)
  # @section -- Database parameters
  port: 5432
  # -- Non-root username for Hoppscotch (ignored if externalDatabase.sqlConnection is set)
  # @section -- Database parameters
  user: hoppscotch
  # -- Hoppscotch database name (ignored if externalDatabase.sqlConnection is set)
  # @section -- Database parameters
  database: hoppscotch
  # -- Password for the non-root username for Hoppscotch (ignored if externalDatabase.sqlConnection or externalDatabase.existingSecret are set)
  # @section -- Database parameters
  password: ""
  # -- SQL connection string
  # @section -- Database parameters
  sqlConnection: ""
  # -- Name of an existing secret resource containing the database credentials
  # @section -- Database parameters
  existingSecret: ""
  # -- Name of an existing secret key containing the database credentials (ignored if externalDatabase.existingSecretSqlConnectionKey is set)
  # @section -- Database parameters
  existingSecretPasswordKey: ""
  # -- Name of an existing secret key containing the SQL connection string
  # @section -- Database parameters
  existingSecretSqlConnectionKey: ""
