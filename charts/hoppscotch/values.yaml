imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local

replicaCount: 1

containerPorts:
  http: 80
  https: 443

image:
  repository: hoppscotch/hoppscotch
  pullPolicy: IfNotPresent
  tag: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
securityContext: {}

extraEnvs: []

resources: {}

livenessProbe: {}
readinessProbe: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

volumes: []

volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

defaultInitContainers:
  waitForDatabase:
    enabled: true
    timeout: 60

  waitForDatabaseSetup:
    enabled: true
    timeout: 60

setupDatabaseJob:
  enabled: true

frontend:
  baseUrl: ""
  shortcodeBaseUrl: ""
  adminUrl: ""

  backendGqlUrl: ""
  backendWsUrl: ""
  backendApiUrl: ""

  appTosLink: ""
  appPrivacyPolicyLink: ""

  enableSubpathBasedAccess: true

backend:
  databaseUrl: ""

  aioAlternatePort: 80

  jwtSecret: "secret"
  tokenSaltComplexity: 10
  magicLinkTokenValidity: 3
  refreshTokenValidity: "604800000"
  accessTokenValidity: "86400000"
  sessionSecret: ""

  allowSecureCookies: true
  dataEncryptionKey: "12345678901234567890123456789012"

  redirectUrl: ""

  whitelistedOrigins: []

  allowedAuthProviders:
    - email

  googleAuth:
    clientId: ""
    clientSecret: ""
    callbackUrl: ""
    scope: []

  githubAuth:
    clientId: ""
    clientSecret: ""
    callbackUrl: ""
    scope: []

  microsoftAuth:
    clientId: ""
    clientSecret: ""
    callbackUrl: ""
    scope: ""
    tenant: ""

  mailer:
    smtpEnabled: true
    useCustomConfigs: false
    addressFrom: no-reply@example.com
    smtpUrl: smtps://user:pass@smtp.example.com

    smtpHost: ""
    smtpPort: 465
    smtpSecure: true
    smtpUser: ""
    smtpPassword: ""
    tlsRejectUnauthorized: true

  rateLimit:
    ttl: 60
    max: 100

enterprise:
  licenseKey: ""

  frontend:
    localProxyServerEnabled: false
    proxyAppUrl: ""

  backend:
    githubEnterpriseAuth:
      enabled: false
      authorizationUrl: ""
      tokenUrl: ""
      userProfileUrl: ""
      userEmailUrl: ""

    samlAuth:
      issuer: ""
      audience: ""
      callbackUrl: ""
      cert: ""
      entryPoint: ""
      wantAssertionsSigned: true
      wantResponseSigned: false

    oidcAuth:
      providerName: ""
      issuer: ""
      authorizationUrl: ""
      tokenUrl: ""
      userInfoUrl: ""
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
      scope: []

    clickhouse:
      allowAuditLogs: false
      host: ""
      user: ""
      password: ""

    horizontalScalingEnabled: false
    redisUrl: ""

service:
  type: ClusterIP
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}

networkPolicy:
  enabled: false
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: hoppscotch.local
  ingressClassName: ""
  path: /
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: hoppscotch
    password: secret
    database: hoppscotch
    existingSecret: ""
  architecture: standalone
  primary:
    resourcesPreset: "nano"
    resources: {}

externalDatabase:
  host: localhost
  port: 5432
  user: hoppscotch
  database: hoppscotch
  password: ""
  sqlConnection: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretSqlConnectionKey: ""
