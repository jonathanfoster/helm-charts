## @section Global Parameters

global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  security:
    allowInsecureImages: false

## @section Common Parameters

nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []

## @section Hoppscotch Parameters

existingSecret: ""
replicaCount: 1

containerPorts:
  http: 80
  https: 443

image:
  repository: hoppscotch/hoppscotch
  pullPolicy: IfNotPresent
  tag: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
securityContext: {}

extraEnvs: []

resources: {}

livenessProbe: {}
readinessProbe: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

volumes: []

volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

setupDatabaseJob:
  enabled: true

frontend:
  baseUrl: ""
  shortcodeBaseUrl: ""
  adminUrl: ""

  backendGqlUrl: ""
  backendWsUrl: ""
  backendApiUrl: ""

  appTosLink: ""
  appPrivacyPolicyLink: ""

  enableSubpathBasedAccess: true

  localProxyServerEnabled: false
  proxyAppUrl: ""

backend:
  databaseUrl: ""

  aioAlternatePort: 80

  authToken:
    jwtSecret: "secret"
    tokenSaltComplexity: 10
    magicLinkTokenValidity: 3
    refreshTokenValidity: "604800000"
    accessTokenValidity: "86400000"
    sessionSecret: "secret"

  allowSecureCookies: true
  dataEncryptionKey: "12345678901234567890123456789012"

  redirectUrl: ""

  whitelistedOrigins: []

  auth:
    allowedProviders:
      - email

    google:
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
      scope: []

    github:
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
      scope: []

    githubEnterprise:
      enabled: false
      authorizationUrl: ""
      tokenUrl: ""
      userProfileUrl: ""
      userEmailUrl: ""

    microsoft:
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
      scope: ""
      tenant: ""

    oidc:
      providerName: ""
      issuer: ""
      authorizationUrl: ""
      tokenUrl: ""
      userInfoUrl: ""
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
      scope: []

    saml:
      issuer: ""
      audience: ""
      callbackUrl: ""
      cert: ""
      entryPoint: ""
      wantAssertionsSigned: true
      wantResponseSigned: false

  mailer:
    smtpEnabled: true
    useCustomConfigs: false
    addressFrom: no-reply@example.com
    smtpUrl: smtps://user:pass@smtp.example.com

    smtpHost: ""
    smtpPort: 465
    smtpSecure: true
    smtpUser: ""
    smtpPassword: ""
    tlsRejectUnauthorized: true

  rateLimit:
    ttl: 60
    max: 100

  enterpriseLicenseKey: ""

  clickhouse:
    allowAuditLogs: false
    host: ""
    user: ""
    password: ""

  horizontalScalingEnabled: false
  redisUrl: ""

## @section Traffic Exposure Parameters

## Hoppscotch Service Parameters

service:
  type: ClusterIP
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}

networkPolicy:
  enabled: false
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: hoppscotch.local
  ingressClassName: ""
  path: /
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

## @section Persistence Parameters

persistence:
  enabled: false
  mountPath: /hoppscotch/data
  subPath: ""
  storageClass: ""
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  dataSource: {}
  existingClaim: ""
  selector: {}

## @section Default Init Containers Parameters

defaultInitContainers:
  waitForDatabase:
    enabled: true
    timeout: 300

  waitForDatabaseSetup:
    enabled: true
    timeout: 300

## @section Other Parameters

rbac:
  create: false
  rules: []

serviceAccount:
  create: false
  name: ""
  annotations: {}
  automountServiceAccountToken: true

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    annotations: {}
    labels: {}
    jobLabel: ""
    honorLabels: false
    tlsConfig: {}
    interval: ""
    scrapeTimeout: ""
    metricsRelabelings: []
    relabelings: []
    selector: {}

## PostgreSQL Parameters

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: hoppscotch
    password: secret
    database: hoppscotch
    existingSecret: ""
  architecture: standalone
  primary:
    resourcesPreset: "nano"
    resources: {}

externalDatabase:
  host: localhost
  port: 5432
  user: hoppscotch
  database: hoppscotch
  password: ""
  sqlConnection: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretSqlConnectionKey: ""

## Redis Parameters

redis:
  enabled: false
  auth:
    enabled: true
    password: secret
    existingSecret: ""
  architecture: standalone
  master:
    resourcesPreset: "nano"
    resources: {}

externalRedis:
  host: ""
  port: 6379
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
