# @section -- Global Parameters

global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  security:
    allowInsecureImages: false

# @section -- Common Parameters

nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []

# @section -- Hoppscotch Parameters

replicaCount: 1

image:
  repository: hoppscotch/hoppscotch
  pullPolicy: IfNotPresent
  tag: ""

containerPorts:
  http: 80
  https: 443

existingSecret: ""

extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

resourcesPreset: "nano"
resources: {}

livenessProbe: {}
readinessProbe: {}

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
securityContext: {}

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

volumes: []

volumeMounts: []

setupDatabaseJob:
  enabled: true

## Hoppscotch Application Configuration

hoppscotch:
  frontend:
    baseUrl: ""
    shortcodeBaseUrl: ""
    adminUrl: ""

    backendGqlUrl: ""
    backendWsUrl: ""
    backendApiUrl: ""

    appTosLink: ""
    appPrivacyPolicyLink: ""

    enableSubpathBasedAccess: true

    localProxyServerEnabled: false
    proxyAppUrl: ""

  backend:
    databaseUrl: ""

    aioAlternatePort: 80

    authToken:
      jwtSecret: "secret"
      tokenSaltComplexity: 10
      magicLinkTokenValidity: 3
      refreshTokenValidity: "604800000"
      accessTokenValidity: "86400000"
      sessionSecret: "secret"

    allowSecureCookies: true
    dataEncryptionKey: "12345678901234567890123456789012"

    redirectUrl: ""

    whitelistedOrigins: []

    auth:
      allowedProviders:
        - email

      google:
        clientId: ""
        clientSecret: ""
        callbackUrl: ""
        scope:
          - email
          - profile

      github:
        clientId: ""
        clientSecret: ""
        callbackUrl: ""
        scope:
          - user:email

      githubEnterprise:
        enabled: false
        authorizationUrl: ""
        tokenUrl: ""
        userProfileUrl: ""
        userEmailUrl: ""

      microsoft:
        clientId: ""
        clientSecret: ""
        callbackUrl: ""
        scope: user.read
        tenant: ""

      oidc:
        providerName: ""
        issuer: ""
        authorizationUrl: ""
        tokenUrl: ""
        userInfoUrl: ""
        clientId: ""
        clientSecret: ""
        callbackUrl: ""
        scope:
          - openid
          - profile
          - email

      saml:
        issuer: ""
        audience: ""
        callbackUrl: ""
        cert: ""
        entryPoint: ""
        wantAssertionsSigned: true
        wantResponseSigned: false

    mailer:
      smtpEnabled: true
      useCustomConfigs: false
      addressFrom: no-reply@example.com
      smtpUrl: smtps://user:pass@smtp.example.com

      smtpHost: ""
      smtpPort: 465
      smtpSecure: true
      smtpUser: ""
      smtpPassword: ""
      tlsRejectUnauthorized: true

    rateLimit:
      ttl: 60
      max: 100

    enterpriseLicenseKey: ""

    clickhouse:
      allowAuditLogs: false
      host: ""
      user: ""
      password: ""

    horizontalScalingEnabled: false
    redisUrl: ""

# @section -- Traffic Exposure Parameters

service:
  type: ClusterIP
  ports:
    http: 80
    https: 443
  clusterIP: ""
  nodePorts:
    http: ""
    https: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  sessionAffinity: None
  sessionAffinityConfig: {}
  extraPorts: []

networkPolicy:
  enabled: false
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true
  extraIngress: []
  extraEgress: []
  ingressPodMatchLabels: {}
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}

ingress:
  enabled: false
  ingressClassName: ""
  hostname: hoppscotch.local
  path: /
  pathType: ImplementationSpecific
  apiVersion: ""
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

# @section -- Persistence Parameters

persistence:
  enabled: false
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  mountPath: /hoppscotch/data
  subPath: ""
  annotations: {}
  dataSource: {}
  existingClaim: ""
  selector: {}

# @section -- Default Init Containers Parameters

defaultInitContainers:
  waitForDatabase:
    enabled: true
    timeout: 300
    resourcesPreset: "nano"
    resources: {}

  waitForDatabaseSetup:
    enabled: true
    timeout: 300
    resourcesPreset: "nano"
    resources: {}

# @section -- Other Parameters

serviceAccount:
  create: false
  name: ""
  annotations: {}
  automountServiceAccountToken: true

rbac:
  create: false
  rules: []

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    annotations: {}
    labels: {}
    jobLabel: ""
    honorLabels: false
    interval: ""
    scrapeTimeout: ""
    tlsConfig: {}
    metricsRelabelings: []
    relabelings: []
    selector: {}

# @section -- Database Parameters

## PostgreSQL Parameters

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: hoppscotch
    password: secret
    database: hoppscotch
    existingSecret: ""
  architecture: standalone
  primary:
    resourcesPreset: "nano"
    resources: {}

externalDatabase:
  host: localhost
  port: 5432
  user: hoppscotch
  database: hoppscotch
  password: ""
  sqlConnection: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretSqlConnectionKey: ""

## Redis Parameters

redis:
  enabled: false
  auth:
    enabled: true
    password: secret
    existingSecret: ""
  architecture: standalone
  master:
    resourcesPreset: "nano"
    resources: {}

externalRedis:
  host: ""
  port: 6379
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""

## ClickHouse Parameters

clickhouse:
  enabled: false
  auth:
    username: hoppscotch
    password: secret
    existingSecret: ""
  resourcesPreset: "nano"
  resources: {}

externalClickhouse:
  host: ""
  port: 8123
  user: ""
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
